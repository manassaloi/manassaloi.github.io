---
layout: post
title:  "Accidental Empires - Robert Cringely"
tags: booksummaries
categories: booksummaries

---

**Note:** While reading a book whenever I come across something interesting, I highlight it on my Kindle. Later I turn those highlights into a blogpost. It is not a complete summary of the book. These are my notes which I intend to go back to later. Let's start!

Alan Kay, jazz musician, computer visionary, and Taylor’s first hire at PARC, liked to say that of the top one hundred computer researchers in the world, fifty-eight of them worked at PARC. And sometimes he said that seventy-six of the top one hundred worked at PARC. The truth was that Taylor’s lab never had more than fifty researchers, so both numbers were inflated, but it was also true that for a time under Taylor, CSL certainly worked as though there were many more than fifty researchers. In less than three years from its founding in 1970, CSL researchers built their own time-sharing computer, built the Alto, and invented both the laser printer and Ethernet.

To accomplish so much so fast, Taylor created a flat organizational structure; everyone who worked at CSL, from scientists to secretaries, reported directly to Bob Taylor. There were no middle managers. Taylor knew his limits, though, and those limits said that he had the personal capacity to manage forty to fifty researchers and twenty to thirty support staff. Changing the world with that few people required that they all be the best at what they did, so Taylor became an elitist, hiring only the best people he could find and subjecting potential new hires to rigorous examination by their peers, designed to “test the quality of their nervous systems.” Every new hire was interviewed by everyone else at CSL. Would-be researchers had to appear in a forum where they were asked to explain and defend their previous work. There were no junior research people. Nobody was wooed to work at CSL; they were challenged. The meek did not survive.

Newly hired researchers typically worked on a couple of projects with different groups within CSL. Nobody worked alone. Taylor was always cross-fertilizing, shifting people from group to group to get the best mix and make the most progress. Like his earlier ARPA conferences, Taylor chaired meetings within CSL where researchers would present and defend their work. These sessions came to be called Dealer Meetings, because they took place in a special room lined with blackboards, where the presenter stood like a blackjack dealer in the center of a ring of bean-bag chairs, each occupied by a CSL genius taking potshots at this week’s topic. And there was Bob Taylor, too, looking like a high school science teacher and keeping overall control of the process, though without seeming to do so.

While Bob Taylor set the general direction of research at CSL, the ideas all came from his technical staff. Coming up with ideas and then turning them into technologies was all these people had to do. They had no other responsibilities. While they were following their computer dreams, Taylor took care of everything else: handling budgets, dealing with Xerox headquarters, and generally keeping the whole enterprise on track.

Jobs has only three ways of dealing with people: he seduces them, castigates them, or ignores them. In fact, everyone in Jobs’s life eventually runs through all three modes, sometimes more than once. Jobs was in seduction mode when he approached Estridge, and Steve can be incredibly seductive when it suits his needs. He is the best salesman in the world and put all those talents to work trying to recruit the tall man from IBM.

IBMers aren’t in the business to become millionaires. How can they? These people are not sitting on stock options in some start-up, waiting for their penny shares to go public at $8. They work for a company that went public more than sixty years ago —the quintessential blue chip. Even IBM salespeople, who work on commission, selling computers that can cost millions of dollars, have carefully set quotas that effectively limit their earning potential.

Ross Perot, founder of Electronic Data Systems, was one IBM salesman who got fed up and left the company when he filled his sales quota for the entire year before the end of January and knew that he wouldn’t be allowed to sell any more computers—or earn any more money—for eleven more months.

The people of IBM don’t need to be rich. They either want the security of working for a company that will employ them for life, offering fringe benefits beyond those of any welfare state, or they want the sheer power that comes from eventually working up into the stratospheric reaches of the most powerful company on earth. Money and power are not synonymous at IBM, where power is preferred.

The price of both prosperity and power is compliance with the rules and the pace of IBM. The rules say that you go where the company asks you to go, do what the company asks you to do, and don’t talk about work with strangers. There is a class of company that won’t tolerate different behavior, and those companies sometimes suffer for it. IBM is like that. The pace is slow because it takes time to get 760,000 legs marching together.

Every IBM employee’s ambition is apparently to become a manager, and the company helps them out in this area by making management the company’s single biggest business. IBM executives don’t design products and write software; they manage the design and writing of software. They go to meetings. So much effort, in fact, is put into managing all the managers who are managing things that hardly anyone is left over to do the real work. This means that most IBM hardware and nearly all IBM software is written or designed by the lowest level of people in the company—trainees. Everyone else is too busy going to meetings, managing, or learning to be a manager, so there is little chance to include any of their technical expertise in IBM products. Except at the very highest positions in IBM, this corporate support system produces a class of executives with bovine, cud-chewing dispositions, who think only on command and typically rely on the company to tell them what to do and when to do it. Before beginning each new assignment, for example, IBM people are thoroughly briefed with all the information the company believes they will need to know in order to do their new job. The briefings are so complete that most IBM people don’t bother to do any outside reading or research of their own. If IBM marketing executives know how their personal computers compare with the competition’s, it is nearly always through their briefing books and hardly ever by actually using the other guy’s hardware—or even their own.

And at the top of IBM, where synapses do pop on occasion, and brain activity is usually, though not always, measurable, nearly all of that activity goes into playing corporate political games, as though competitors and even the global computer market didn’t exist.

In both hardware and software, successful reinvention takes place along the edges of established markets. It’s usually not enough just to make another computer or program like all the others; the new product has to be superior in at least one respect. Reinvented products have to be cheaper, or more powerful, or smaller, or have more features than the more established products with which they are intended to compete. These are all examples of edges. Offer a product that is in no way cheaper, faster, or more versatile—that skirts no edges—and buyers will see no reason to switch from the current best-seller.

Most of the so-called visionaries don’t program and don’t design computers—or at least they haven’t done so for many years. The advantages these people have are that they are listened to by others and, because they are listened to by others, all the real technical people who want the world to know about the neat stuff they are working on seek out these visionaries and give them demonstrations. Potential visions are popping out at these folks all the time. All they have to do is sort through the visions and apply some common sense.

Common sense told Mitch Kapor that IBM would succeed in the personal computer business but that even IBM would require a compelling application—a spreadsheet written from scratch to take advantage of the PC platform—to take off in the market. Kapor, who had a pretty fair idea of what was coming down the tube from most of the major software companies, was amazed that nobody seemed to be working on such a native-mode PC spreadsheet, leaving the field clear for him. Deciding to do 1-2-3 was a “no brainer.”

IBM wasn’t afraid of others’ copying the design of the PC, although nearly the entire system was built of off-the-shelf parts from other companies. Conventional wisdom in Boca Raton said that competitors would always pay more than IBM did for the parts needed to build a PC clone. To compete with IBM, another company would have to sell its PC clone at such a low price that there would be no profit. That was the theory.

Compaq founders realized that software, and not hardware, was what really mattered. In order for their computer to be successful, it would have to have a large library of available software right from the start, which meant building a computer that was compatible with some other system. The only 16-bit standard available that qualified under these rules was IBM’s, so that was the decision—to make an IBM-compatible PC—and to make it damn compatible— 100 percent. Any program that would run on an IBM PC would run on a Compaq. Any circuit card that would operate in an IBM PC would operate in a Compaq. The key to their success would be leveraging the market’s considerable investment in IBM.

Crunching the numbers harder than IBM had, the Compaq founders discovered that a smaller company with less overhead than IBM’s could, in fact, bring out a lower-priced product and still make an acceptable profit. This didn’t mean undercutting IBM by a lot but by a significant amount—about $800 on the first Compaq model compared to an IBM PC with equivalent features.

Compaq, like any other company pushing a new product, still had to ride the edges of an existing market, offering additional reasons for customers to choose its computer over IBM’s. Just to be different, the first Compaq models were 28-pound portables— luggables, they came to be called. People didn’t really drag these sewing machine-sized units around that much, but since IBM didn’t make a luggable version of the PC, making theirs portable gave Compaq a niche to sell in right next to IBM.

Compaq appealed to computer dealers, even those who already sold IBM. Especially those who already sold IBM. For one thing, the Compaq portables were available, while IBM PCs were sometimes in short supply. Compaq pricing allowed dealers a 36 percent markup compared to IBM’s 33 percent. And unlike IBM, Compaq had no direct sales force that competed with dealers. A third of IBM’s personal computers were sold direct to major corporations, and each of those sales rankled some local dealer who felt cheated by Big Blue.

Just like IBM, Compaq first appeared in Sears Business Centers and ComputerLand stores, though a year later, at the end of 1982. With the Compaq’s portability, compatibility, availability, and higher profit margins, signing up both chains was not difficult. Bill Murto made the ComputerLand sale by demonstrating the computer propped on the toilet seat in his hotel bathroom, the only place he could find a three-pronged electrical outlet.

Just like IBM, Compaq’s dealer network was built by Sparky Sparks, who was hired away from Big Blue to do a repeat performance, selling similar systems to a virtually identical dealer network, though this time from Houston rather than Boca Raton.

By riding IBM’s tail while being even better than IBM, Compaq sold 47,000 computers worth $111 million in its first year—a start-up record.

With the overnight success of Compaq, the idea of doing 100 percent IBM-compatible clones suddenly became very popular (“We’d intended to do it this way all along,” the clone makers said), and the IBM workalikes quickly faded away. The most difficult and expensive part of Compaq’s success had been developing the ROM-BIOS, a problem not faced by the many Compaq impersonators that suddenly appeared. What Compaq had done, companies like Phoenix Technologies could do too, and did. But Phoenix, a start-up from Boston, made its money not by building PC clones but by selling IBM-compatible BIOS chips to clone makers. Buying Phoenix’s ROM-BIOS for $25 per chip, a couple of guys in a warehouse in New Jersey could put together systems that looked and ran just like IBM PCs, but cost 30 percent less to buy.

For months, IBM was shielded from the impact of the clone makers, first by Big Blue’s own shortage of machines and later by a scam perpetrated by dealers.

When IBM’s factories began churning out millions and millions of PCs, the computer giant set in place a plan that offered volume discounts to dealers. The more computers a dealer ordered, the less each computer cost. To make their cost of goods as low as possible, many dealers ordered as many computers as IBM would sell them, even if that was more computers than they could store at one time or even pay for. Having got the volume price, these dealers would sell excess computers out the back door to unauthorized dealers, at cost. Just when the planners in Boca Raton thought dealers were selling at retail everything they could make, these gray market PCs were being flogged by mail order or off the back of a truck in a parking lot, generally for 15 percent under list price.

Typical of these gray marketeers was Michael Dell, an 18-year-old student at the University of Texas with a taste for the finer things in life, who was soon clearing $30,000 per month selling gray market PCs from his Austin dorm room. Today Dell is a PC clone-maker, selling $400 million worth of IBM compatible computers a year.

Seeing this gray market scam as incessant demand, IBM just kept increasing production, increasing at the same time the downward pressure on gray market prices until some dealers were finally selling machines out of the back door for less than cost. That’s when Big Blue finally noticed the clones.

For companies like IBM, the eventual problem with a hardware standard like the IBM PC is that it becomes a commodity. Companies you’ve never heard of in exotic places like Taiwan and Bayonne suddenly see that there is a big demand for specific PC power supplies, or cases, or floppy disk drives, or motherboards, and whump! the skies open and out fall millions of Acme power supplies, and Acme deluxe computer cases, and Acme floppy disk drives, and Acme Jr. motherboards, all built exactly like the ones used by IBM, just as good, and at one-third the price. It always happens. And if you, like IBM, are the caretaker of the hardware standard, ,or at least think that you still are, because sometimes such duties just drift away without their holder knowing it, the only way to fight back is by changing the rules. You’ve got to start selling a whole new PC that can’t use Acme power supplies, or Acme floppy disk drives, or Acme Jr. motherboards, and just hope that the buyers will follow you to that new standard so the commoditization process can start all over again.

Commoditization is great for customers because it drives prices down and forces standard setters to innovate. In the absence of such competition, IBM would have done nothing. The company would still be building the original PC from 1981 if it could make enough profit doing so.

But IBM couldn’t keep making a profit on its old hardware, which explains why Big Blue, in 1984, cut prices on its existing PC line and then introduced the PC-AT, a completely new

computer that offered significantly higher performance and a certain amount of software compatibility with the old PC while conveniently having no parts in common with the earlier machine.

The AT was a speed demon. It ran two to three times faster than the old PCs and XTs. It had an Intel 80286 microprocessor, completely bypassing the flawed 80186 used in the Radio Shack Model 2000. Instead of a 360K floppy disk drive, the AT used a special 1.2-megabyte floppy, and every machine came with at least a 20-megabyte hard disk.

At around $4,000, the AT was also expensive, it wasn’t able to run many popular PC-DOS applications, and sometimes it didn’t run at all because the Computer Memories Inc. (CMI) hard disk used in early units had a tendency to die, taking the first ten chapters of your great American novel with it. IBM was so eager to swat Compaq and the lesser clone makers that it brought out the AT without adequate testing of the CMI drive’s controller card built by Western Digital. There was no alternative controller to replace the faulty units, which led to months of angry customers and delayed production. Some customers who ordered the PC-AT at its introduction did not receive their machines for nine months.

Like the emir, Gates wants to run his particular subculture with an iron hand, dispensing flawed justice as he sees fit and generally keeping the bucks flowing in, not out. Jobs wants to control the world. He doesn’t care about maintaining a strategic advantage; he wants to attack, to bring death to the infidels. We’re talking rivers of blood here. We’re talking martyrs. Jobs doesn’t care if there are a dozen companies or a hundred companies opposing him. He doesn’t care what the odds are against success. Like Saddam, he doesn’t even care how much his losses are. Nor does he even have to win, if, by losing the mother of all battles he can maintain his peculiar form of conviction, still stand before an adoring crowd of nerds, symbolically firing his 9 mm automatic into the air, telling the victors that they are still full of shit.

You guessed it. By the usual standards of Silicon Valley CEOs, where job satisfaction is measured in dollars, and an opulent retirement by age 40 is the goal, Steve Jobs is crazy.

Apple Computer was always different. The company tried hard from the beginning to shake the hobbyist image, replacing it with the idea that the Apple II was an appliance but not just any appliance; it was the next great appliance, a Cuisinart for the mind. Apple had the five-color logo and the first celebrity spokesperson: Dick Cavett, the thinking person’s talk show host.

Alone among the microcomputer makers of the 1970s, the people of Apple saw themselves as not just making boxes or making money; they thought of themselves as changing the world.

Atari wasn’t changing the world; it was in the entertainment business. Commodore wasn’t changing the world; it was just trying to escape from the falling profit margins of the calculator market while running a stock scam along the way. Radio Shack wasn’t changing the world; it was just trying to find a new consumer wave to ride, following the end of the CB radio boom. Even IBM, which already controlled the world, had no aspirations to change it, just to wrest some extra money from a small part of the world that it had previously ignored.

In contrast to the hardscrabble start-ups that were trying to eke out a living selling to hobbyists and experimenters, Apple was appealing to doctors, lawyers, and middle managers in large corporations by advertising on radio and in full pages of Scientific American. Apple took a heroic approach to selling the personal computer and, by doing so, taught all the others how it should be done.

They were heroes, those Apple folk, and saw themselves that way. They were more than a computer company. In fact, to figure out what was going on in the upper echelons in those Apple II days, think of it not as a computer company at all but as an episode of “Bonanza.”

Every high-tech company needs a technical visionary, someone who has a clear idea about the future and is willing to do whatever it takes to push the rest of the operation in that direction. In the earliest days of Apple, Woz was the technical visionary along with doing nearly everything else. His job was to see the potential product that could be built from a pile of computer chips. But that was back when the world was simpler and the paradigm was to bring to the desktop something that emulated a mainframe computer terminal. After 1981, Woz was gone, and it was time for someone else to take the visionary role. The only people inside Apple who really wanted that role were Jef Raskin and Steve Jobs.

Raskin was an iconoclastic engineer who first came to Apple to produce user manuals for the Apple II. His vision of the future was a very basic computer that would sell for around $600—a computer so easy to use that it would require no written instructions, no user training, and no product support from Apple. The new machine would be as easy and intuitive to use as a toaster and would be sold at places like Sears and K-Mart. Raskin called his computer Macintosh.

Jobs’s ambition was much grander. He wanted to lead the development of a radical and complex new computer system that featured a graphical user interface and mouse (Raskin preferred keyboards). Jobs’s vision was code-named Lisa.

Depending on who was talking and who was listening, Lisa was either an acronym for “large integrated software architecture,” or for “local integrated software architecture” or the name of a daughter born to Steve Jobs and Nancy Rogers in May 1978. Jobs, the self-centered adoptee who couldn’t stand competition from a baby, at first denied that he was Lisa’s father, sending mother and baby for a time onto the Santa Clara County welfare rolls. But blood tests and years later, Jobs and Lisa, now a teenager, are often seen rollerblading on the streets of Palo Alto. Jobs and Rogers never married.

Lisa was a vision that made the as-yet-unconceived IBM PC look primitive in comparison. And though he didn’t know it at the time, it was also a development job far bigger than Steve Jobs could even imagine.

One of the many things that Steve Jobs didn’t know in those days was Cringely’s Second Law, which I figured out one afternoon with the assistance of a calculator and a six-pack of Heineken. Cringely’s Second Law states that in computers, ease of use with equivalent performance varies with the square root of the cost of development. This means that to design a computer that’s ten times easier to use than the Apple II, as the Lisa was intended to be, would cost 100 times as much money. Since it cost around $500,000 to develop the Apple II, Cringely’s Second Law says the cost of building the Lisa should have been around $50 million. It was.

Vision, you’ll recall, is the ability to see potential in the work of others. The jump from having vision to being a visionary, though, is a big one. The visionary is a person who has both the vision and the willingness to put everything on the line, including his or her career, to further that vision. There aren’t many real visionaries in this business, but Steve Jobs is one. Jobs became the perfect visionary, buying so deeply into the vision that he became one with it. If you were loyal to Steve, you embraced his vision. If you did not embrace his vision, you were either an enemy or brain-dead.

Lisa was ahead of its time. When most microcomputers came with a maximum of 64,000 characters of memory, the Lisa had 1 million characters. When most personal computers were capable of doing only one task at a time, Lisa could do several. The computer was so easy to use that customers were able to begin working within thirty minutes of opening the box. Setting up the system was so simple that early drafts of the directions used only pictures, no words. With its mouse, graphical user interface, and bit-mapped screen, Lisa was the realization of nearly every design feature invented at Xerox PARC except networking.

Lisa was professional all the way. Painstaking research went into every detail of the user interface, with arguments ranging up and down the division about what icons should look like, whether on-screen windows should just appear and disappear or whether they should zoom in and out. Unlike nearly every other computer in the world, Lisa had no special function keys to perform complex commands in a single keystroke, and offered no obscure ways to hold down three keys simultaneously and, by so doing, turn the whole document into Cyrillic, or check its spelling, or some other such nonsense.

To make it easy to use, Lisa followed PARC philosophy, which meant that no matter what program you were using, hitting the E key just put an E on-screen rather than sending the program into edit mode, or expert mode, or erase mode. Modes were evil. At PARC, you were either modeless or impure, and this attitude carried over to Lisa, where Larry Tesler’s license plate read no modes. Instead of modes, Lisa had a very simple keyboard that was used in conjunction with the mouse and onscreen menus to manipulate text and graphics without arcane commands.

When Lisa was taken from him, Jobs went through a paradigm shift that combined his dreams for the Lisa with Raskin’s idea of appliancelike simplicity and low cost. Jobs decided that the problem with Lisa was not that it lacked networking capability but that its high price doomed it to selling in a market that demanded networking. There’d be no such problem with Macintosh, which would do all that Lisa did but at a vastly lower price. Never mind that it was technically impossible.

Lisa was a big project, while Macintosh was much smaller because Jobs insisted on an organization small enough that he could dominate every member, bending each to his will. He built the Macintosh on the backs of Andy Hertzfeld, who wrote the system software, and Burrell Smith, who designed the hardware. All three men left their idiosyncratic fingerprints all over the machine. Hertzfeld gave the Macintosh an elegant user interface and terrific look and feel, mainly copied from Lisa. He also made Macintosh very, very difficult to write programs for. Smith was Jobs’s ideal engineer because he’d come up from the Apple II service department (“I made him,” Jobs would say). Smith built a clever little box that was incredibly sophisticated and nearly impossible to manufacture.

Jobs’s vision imposed so many restraints on the Macintosh that it’s a wonder it worked at all. In contrast to Lisa, with its million characters of memory, Raskin wanted Macintosh to have only 64,000 characters—a target that Jobs continued to aim for until long past the time when it became clear to everyone else that the machine needed more memory. Eventually, he “allowed” the machine to grow to 128,000 characters, though even with that amount of memory, the original 128K Macintosh still came to fit people’s expectations that mechanical things don’t work. Apple engineers, knowing that further memory expansion was inevitable, built in the capability to expand the 128K machine to 5I2K, though they couldn’t tell Jobs what they had done because he would have made them change it back.

With Mike Markkula again in semiretirement, concentrating on his family and his jet charter business, there was no adult supervision in place at Apple, and Jobs ran amok. With total power, the willful kid who’d always resented the fact that he had been adopted, created at Apple a metafamily in which he played the domineering, disrespectful, demanding type of father that he imagined must have abandoned him those many years ago.

Here’s how Steve-As-Dad interpreted Management By Walking Around. Coming up to an Apple employee, he’d say, “I think Jim [another employee] is shit. What do you think?”

If the employee agrees that Jim is shit, Jobs went to the next person and said, “Bob and I think Jim is shit. What do you think?”

If the first employee disagreed and said that Jim is not shit, Jobs would move on to the next person, saying, “Bob and I think Jim is great. What do you think?”

Public degradation played an important role too. When Jobs finally succeeded in destroying the Lisa division, he spoke to the assembled workers who were about to be reassigned or laid off. “I see only B and C players here,” he told the stunned assemblage. “All the A players work for me in the Macintosh division. I might be interested in hiring two or three of you [out of 300]. Don’t you wish you knew which ones I’ll choose?”

Jobs was so full of himself that he began to believe his own PR, repeating as gospel stories about him that had been invented to help sell computers. At one point a marketer named Dan’l Lewin stood up to him, saying, “Steve, we wrote this stuff about you. We made it up.”

Somehow, for all the abuse he handed out, nobody attacked Jobs in the corridor with a fire axe. I would have. Hardly anyone stood up to him. Hardly anyone quit. Like the Bhagwan, driving around Rancho Rajneesh each day in another Rolls-Royce, Jobs kept his troops fascinated and productive. The joke going around said that Jobs had a “reality distortion field” surrounding him. He’d say something, and the kids in the Macintosh division would find themselves replying, “Drink poison Kool-Aid? Yeah, that makes sense.”

Steve Jobs gave impossible tasks, never acknowledging that they were impossible. And, as often happens with totalitarian rulers, most of his impossible demands were somehow accomplished, though at a terrible cost in ruined careers and failed marriages.

Beyond pure narcissism, which was there in abundance, Jobs used these techniques to make sure he was surrounding himself with absolutely the best technical people. The best, nothing but the best, was all he would tolerate, which meant that there were crowds of less-than-godlike people who went continually up and down in Jobs’s estimation, depending on how much he needed them at that particular moment. It was crazy-making.

Here’s a secret to getting along with Steve Jobs: when he screams at you, scream back. Take no guff from him, and if he’s the one who is full of shit, tell him, preferably in front of a large group of amazed underlings. This technique works because it gets Jobs’s attention and fits in with his underlying belief that he probably is wrong but that the world just hasn’t figured that out yet. Make it clear to him that you, at least, know the truth.

Jobs had all kinds of ideas he kept throwing out. Projects would stop. Projects would start. Projects would get so far and then be abandoned. Projects would go on in secret, because the budget was so large that engineers could hide things they wanted to do, even though that project had been canceled or never approved. For example, Jobs thought at one point that he had killed the Apple III, but it went on anyhow.

Steve Jobs created chaos because he would get an idea, start a project, then change his mind two or three times, until people were doing a kind of random walk, continually scrapping and starting over. Apple was confusing suppliers and wasting huge amounts of money doing initial manufacturing steps on products that never appeared.

Despite the fact that Macintosh was developed with a much smaller team than Lisa and it took advantage of Lisa technology, the little computer that was supposed to have sold at K-Mart for $600 ended up costing just as much to bring to market as Lisa had. From $600, the price needed to make a MacProfit doubled and tripled until the Macintosh could no longer be imagined as a home computer. Two months before its introduction, Jobs declared the Mac to be a business computer, which justified the higher price.

Apple clearly wasn’t very disciplined. Jobs created some of that, and a lot of it was created by the fact that it didn’t matter to him whether things were organized. Apple people were rewarded for having great ideas and for making great technical contributions but not for saving money.

The whole marketing operation at Apple is now run by former salespeople, a dangerous trend. Marketing is the creation of long-term demand, while sales is execution of marketing strategies. Marketing is buying the land, choosing what crop to grow, planting the crop, fertilizing it, and then deciding when to harvest. Sales is harvesting the crop. Salespeople in general don’t think strategically about the business, and it’s this short-term focus that’s prevalent right now at Apple.

With the company in a constant state of reorganization, there is little sense of an enduring commitment to strategy at Apple. It’s just not in the culture. Surprisingly, the company has a commitment to doing good products; it’s the follow-through that suffers. Apple specializes in flashy product introductions but then finds itself wandering away in a few weeks or months toward yet another pivotal strategy and then another.

Compare this with Microsoft, which is just the opposite, doing terrific implementation of mediocre products. For example, in the area of multimedia computing—the hot new product classification that integrates computer text, graphics, sound, and full-motion video—Microsoft’s Multimedia Windows product is ho-hum technology acquired from a variety of sources and not very well integrated, but the company has implemented it very well. Microsoft does a good roll-out, offers good developer support, and has the same people leading the operation for years and years. They follow the philosophy that as long as you are the market leader and are still throwing technology out there, you won’t be dislodged.

Microsoft is taking the Japanese approach of not caring how long or how much money it takes to get multimedia right. They’ve been at it for six years so far, and if it takes another six years, so be it. That’s what makes me believe Microsoft will continue to be a factor in multimedia, no matter how bad its products are.

So how did Atkinson, Page, and Tribble get off so easily when the rest of us have to suffer through the rhythmic pattern of being ignored, then seduced, then scourged by Jobs? Simple; among the three, they have the total brainpower of a typical Third World country, which is more than enough to make even Steve Jobs realize that he is, in comparison, a single-celled, carbon-based life form. Atkinson, Page, and Tribble have answers to questions that Jobs doesn’t even know he should ask.

There is an enormous difference between starting a company and running one. Thinking up great ideas, which requires mainly intelligence and knowledge, is much easier than building an organization, which also requires measures of tenacity, discipline, and understanding. Part of the reason that nineteen out of twenty high-tech start-ups end in failure must be the difficulty of making this critical transition from a bunch of guys in a rented office to a larger bunch of guys in a rented office with customers to serve. Customers? What are those?

Think of the growth of a company as a military operation, which isn’t such a stretch, given that both enterprises involve strategy, tactics, supply lines, communication, alliances, and manpower.

Whether invading countries or markets, the first wave of troops to see battle are the commandos. Woz and Jobs were the commandos of the Apple II. Don Estridge and his twelve disciples were the commandos of the IBM PC. Dan Bricklin and Bob Frankston were the commandos of VisiCalc. Mitch Kapor and Jonathan Sachs were the commandos of Lotus 1-2-3. Commandos parachute behind enemy lines or quietly crawl ashore at night. A start-up’s biggest advantage is speed, and speed is what commandos live for. They work hard, fast, and cheap, though often with a low level of professionalism, which is okay, too, because professionalism is expensive. Their job is to do lots of damage with surprise and teamwork, establishing a beachhead before the enemy is even aware that they exist. Ideally, they do this by building the prototype of a product that is so creative, so exactly correct for its purpose that by its very existence it leads to the destruction of other products. They make creativity a destructive act.

For many products, and even for entire families of products, the commandos are the only forces that are allowed to be creative. Only they get to push the state of the art, providing creative solutions to customer needs. They have contact with potential customers, view the development process as an adventure, and work on the total product. But what they build, while it may look like a product and work like a product, usually isn’t a product because it still has bugs and major failings that are beneath the notice of commando types. Or maybe it works fine but can’t be produced profitably without extensive redesign. Commandos are useless for this type of work. They get bored.

I remember watching a paratrooper being interviewed on televison in Panama after the U.S. invasion. “It’s not great,” he said. “We’re still here.”

Sometimes commandos are bored even before the prototype is complete, so it stalls. The choice then is to wait for the commandos to regain interest or to find a new squad of commandos.

When 3Com Corp. was developing the first circuit card that would allow personal computers to communicate over Ethernet computer networks, the lead commando was Ron Crane, a brilliant, if erratic, engineer. The very future of 3Com depended on his finishing the Ethernet card on time, since the company was rapidly going broke and additional venture funding was tied to successful completion of the card. No Ethernet card, no money; no money, no company. In the middle of this high-pressure assignment, Crane just stopped working on the Ethernet card, leaving it unfinished on his workbench, and compulsively turned to finding a way to measure the sound reflectivity of his office ceiling tiles. That’s the way it is sometimes when commandos get bored. Nobody else was prepared to take over Crane’s job, so all his co-workers at 3Com could think to do in this moment of crisis was to wait for the end of his research, hoping that it would go well.

The happy ending here is that Crane eventually established 3Com’s ceiling tile acoustic reflectivity standard, regained his Ethernet bearings, and delivered the breakthrough product, allowing 3Com to achieve its destiny as a $400 million company.

It’s easy to dismiss the commandos. After all, most of business and warfare is conventional. But without commandos, you’d never get on the beach at all.

Grouping offshore as the commandos do their work is the second wave of soldiers, the infantry. These are the people who hit the beach en masse and slog out the early victory, building on the start given them by the commandos. The second-wave troops take the prototype, test it, refine it, make it manufacturable, write the manuals, market it, and ideally produce a profit. Because there are so many more of these soldiers and their duties are so varied, they require an infrastructure of rules and procedures for getting things done—all the stuff that commandos hate. For just this reason, soldiers of the second wave, while they can work with the first wave, generally don’t trust them, though the commandos don’t even notice this fact, since by this time they are bored and already looking for the door.

The second wave is hardest to manage because they require a structure in which to work. While the commandos make success possible, it’s the infantry that makes success happen. They know their niche and expend the vast amounts of resources it takes to maintain position, or to reposition a product if the commandos made too many mistakes. While the commandos come up with creative ways to hurt the enemy, giving the start-up its purpose and early direction, the infantry actually kill the enemy or drive it away, occupying the battlefield and establishing a successful market presence for the start-up and its product.

What happens then is that the commandos and the infantry head off in the direction of Berlin or Baghdad, advancing into new territories, performing their same jobs again and again, though each time in a slightly different way. But there is still a need for a military presence in. the territory they leave behind, which they have liberated. These third-wave troops hate change. They aren’t troops at all but police. They want to fuel growth not by planning more invasions and landing on more beaches but by adding people and building economies and empires of scale. AT&T, IBM, and practically all other big, old, successful industrial companies are examples of third-wave enterprises. They can’t even remember their first- and second-wave founders.

Engineers in these established companies work on just part of a product, view their work as a job rather than an adventure, and usually have no customer contact. They also have no expectation of getting rich, and for good reason, because as companies grow, and especially after they go public, stock becomes a less effective employee motivator. They get fewer shares at a higher price, with less appreciation potential. Of course, there is also less risk, and to third-wave troops, this safety makes the lower reward worthwhile.

It’s in the transitions between these waves of troops that peril lies for computer start-ups. The company founder and charismatic leader of the invasion is usually a commando, which means that he or she thrills to the idea of parachuting in and slashing throats but can’t imagine running a mature organization that deals with the problems of customers or even with the problems of its own growing base of employees. Mitch Kapor of Lotus Development was an example of a commando/nice guy who didn’t like to fire people or make unpopular decisions, and so eventually tired of being a chief executive, leaving at the height of its success the company he founded.

First-wave types have trouble, too, accepting the drudgery that comes with being the boss of a high-tech start-up. Richard Leeds .worked at Advanced Micro Devices and then Microsoft before starting his own small software company near Seattle. One day a programmer came to report that the toilet was plugged in the men’s room. “Tell the office manager,” Leeds said. “It’s her job to handle things like that.”

“I can’t tell her,” said the programmer, shyly. “She’s a woman.”

Richard Leeds, CEO, fixed the toilet.

The best leaders are experienced second-wave types who know enough to gather together a group of commandos and keep them inspired for the short time they are actually needed. Leaders who rise from the second wave must have both charisma and the ability to work with odd people. Don Estridge, who was recruited by Bill Lowe to head the development of the IBM PC, was a good second-wave leader. He could relate effectively to both IBM’s third-wave management and the first-wave engineers who were needed to bring the original PC to market in just a year.

Apple chairman John Sculley is a third-wave leader of a second-wave company, which explains the many problems he has had over the years finding a focus for himself and for Apple. Sculley has been faking it.

When the leader is a third-wave type, the start-up is hardly ever successful, which is part of the reason that the idea of intrapreneurism—a trendy term for starting new companies inside larger, older companies—usually doesn’t work. The third-wave managers of the parent company trust only other third-wave managers to run the start-up, but such managers don’t know how to attract or keep commandos, so the enterprise generally has little hope of succeeding. This trend also explains the trouble that old-line computer companies have had entering the personal computer business. These companies can see only the big picture—the way that PCs fit into their broad product line of large and small computers. They concentrate more on fitting PCs politely into the product line than on kicking ass in the market, which is the way successes are built.

A team from Unisys Corp. dropped by InfoWorld one day to brag about the company’s high-end personal computers. The boxes were priced at around $30,000, not because they cost so much to build but because setting the price any lower might have hurt the bottom end of Unisys’s own line of minicomputers. Six miles away, at Fry’s Electronics, the legendary Silicon Valley retailer that sells a unique combination of computers, junk food, and personal toiletry items, a virtually identical PC costs less than $3,000. Who buys Unisys PCs? Nobody.

Then Bob Kavner came to town, head of AT&T’s computer operation and the guy who invested $300 million of Ma Bell’s money in Sun Microsystems and then led AT&T’s hostile acquisition of NCR—yet another company that didn’t know its PC from a hole in the ground. Eating a cup of yogurt, Kavner asked why we gave his machines such bad scores in our product reviews. We’d tested the machines alongside competitors’ models and found that the Ma Bell units were poorly designed and badly built. They compared poorly, and we told him so. Kavner was amazed, both by the fact that his products were so bad and to learn that we ran scientific tests; he thought it was just an InfoWorld grudge against AT&T. Here’s a third-wave guy who was concentrating so hard on what was happening inside his own organization that he wasn’t even aware of how that organization fit into the real world or, for that matter, how the real world even worked. No wonder AT&T has done poorly as a personal computer company.

Here’s something that happens to every successful start-up: things go terrifically for months or years, and then suddenly half the founders quit the company. This is pent-up turnover because people have stayed with the company longer than they might have normally.

Say normal turnover is 10 percent per year, which is low for most high-tech companies. If nobody leaves for the first five years because they would lose their stock options, it shouldn’t be surprising to see a 50 percent departure rate when the company finally goes public or is acquired. For years, those people were dying to leave. And they are naturally replaced with a different kind of worker—third-wave workers who are attracted to what they view as a stable, successful company.

Reasons other than boredom and pent-up ambition cause early employees to leave successful young companies. As companies get bigger, they become more organized and process driven, which leads to more waste. Great individual contributors—first-and second-wave types—are very efficient. They hate waste and are good indicators of its presence. When the best people start to bail out, it’s a sign that there is too much waste.

Companies go through other transformations as they grow. Sales volumes go up, and quality control problems go up too. Fighting software bugs and hardware glitches, getting the product right before it goes out the door, rather than having to fix it afterward sops up more and more money. And as volume grows, so does penetration into the population of unsophisticated users, who require more hand holding than did the more experienced first users of the product. Suddenly what was once an adventure is now just a job.

Ballmer was Bill Gates’s Harvard buddy and Microsoft’s twentieth employee. When Ballmer joined Microsoft in those early days, he didn’t even have an office, but was granted space at one end of the sofa near Bill’s desk. Ballmer, a former brand manager at Procter & Gamble, represented Microsoft’s new business orientation, an orientation that surged after 1989. By that year, Ballmer was running Microsoft’s operating system business and, just as Bill had, he came to the blinding realization that IBM no longer controlled the PC business—Microsoft did. At that moment of clarity, it was not hard to look ahead and see that careful control of the operating system business could yield enormous profits. Microsoft, which was then a $1 billion company, was poised for incredible growth—although only a few people knew it at the time. So Ballmer took a chance. He borrowed everything he could against his Microsoft stock, stock options, and his every other possession. In all, Ballmer was able to borrow $50 million and he used every cent to buy more Microsoft shares. This is radical behavior for a PC executive. Most of these folks are continually engaged in selling their company stock, not buying it. Bill Gates, for example, sells 1 million Microsoft shares per quarter, yielding an average of $300 million per year for outside investing, building houses, buying works of art—you know, the usual. High-tech moguls like Gates are usually concerned with the orderly diversification of their wealth; in contrast, Ballmer was betting his entire fortune on Microsoft. This is the only instance I can recall of such behavior.

There’s something about betting every penny you have in the world that helps with focus, and Microsoft has been very focused during the 1990s. As a result, Steve Ballmer is now Microsoft’s third billionaire, joining Bill Gates and Paul Allen. His shares have increased in value by twenty times since 1989.

We’re floating now on surfboards 300 yards north of the big public pier in Santa Cruz, California. As our feet slowly become numb in the cold Pacific water, it’s good to ponder the fact that this section of coastline, only fifteen miles from Silicon Valley, is the home of the great white shark and has the highest incidence of shark attacks in the world. Knowing that we’re paddling not far from creatures that can bite man and surfboard cleanly in half gives me, at least, a heightened awareness of my surroundings.

We’re waiting for a wave, and can see line after line of them approaching from the general direction of Hawaii. The whole ritual of competitive surfing is choosing the wave, riding it while the judges watch, then paddling out to catch another wave. Choose the wrong wave—one that’s too big or too small—and you’ll either wipe out (fall off the board) or not be able to do enough tricks on that wave to impress the judges. Once you’ve chosen the wave, there is also the decision of how long to ride it, before heading back out to datch another. Success in competitive surfing comes from riding the biggest waves you can handle, working those waves to the max, but not riding the wave too far—because you get more total points riding a lot of short waves than by riding a few waves all the way to the beach.

Surfing is the perfect metaphor for high-technology business. If you can succeed as a competitive surfer, you can succeed in semiconductors, computers, or biotechnology. People who are astute and technically aware can see waves of technology leaving basic research labs at least a decade before they become commercially viable. There are always lots of technology waves to choose from, though it is not always clear right away which waves are going to be the big ones. Great ideas usually appear years sometimes decades—before they can become commercial products. It takes that long both to bring the cost of a high-tech product down to where it’s affordable by the masses, and it can take even longer before those masses finally perceive a personal or business need for the product. Fortunately for those of us who plan to be the next Steve Jobs or Bill Gates, this means that coming up with the technical soul of our eventual empire is mainly a matter of looking down the food chain of basic research to see what’s likely to be the next overnight technosensation a few years from now. The technology is already there, we just have to find it.

Having chosen his or her wave, the high-tech surfer has to ride long enough to see if the wave is really a big one. This generally takes about three years. If it isn’t a big wave, if your company is three years old, your product has been on the market for a year, and sales aren’t growing like crazy, then you chose either the wrong wave or (by starting to ride the wave too early) the wrong time.

Software has been available on CD-ROM optical disks since the mid-1980s, for example, but that business has become profitable only recently as the number of installed CD-ROM drives has grown into the millions. So getting into the CD-ROM business in 1985 would have been getting on the wave too early.

Steve Jobs has been pouring money into NeXT Inc.—his follow-on to Apple Computer—since 1985 and still hasn’t turned a net profit. Steve finally turned NeXT from a hardware business into a software business in 1993 (following the advice in this book), selling NeXTStep, his object-oriented version of the Unix operating system. Unfortunately, Steve didn’t give up the hardware business until Canon, his bedazzled Japanese backer, had invested and lost $350 million in the venture. The only reason NeXT survives at all is that Canon is too embarrassed to write off its investment. So, while NeXT survives, Steve Jobs has clearly been riding this particular wave at least five years too long.

There are some companies that intentionally stay on the same wave as long as they can because doing so is very profitable. IBM did this in mainframes, DEC did it in minicomputers, Wang did it in dedicated word processors. But look at what has happened to those companies. It is better to get off a wave too early (provided that you have another wave already in sight) than to to ride it too long. If you make a mistake and ride a technology wave too far, then the best thing to do is to sell out to some bigger, slower, dumber company dazzled by your cash flow but unaware that you lack prospects for the future.

Surfing is best done on the front of the wave. That’s where the competition is least, the profit margins are highest, and the wave itself provides most of the energy propelling you and your company toward the beach. There are some companies, though, that have been very successful by waiting and watching to see if a wave is going to be big enough to be worth riding,- then, by paddling furiously and spending billions of dollars, they somehow overtake the wave and ride it the rest of the way to the beach. This is how IBM entered the minicomputer, PC, and workstation markets. This is how the big Japanese electronics companies have entered nearly every market. These behemoths, believing that they can’t afford to take a risk on a small wave, prefer to buy their way in later. But this technique works only if the ride is a long one; in order to get their large investments back, these companies rely on long product cycles. Three years is about the shortest product cycle for making big bucks with this technique (which is why IBM has had trouble making a long-term success of its PC operation, where product cycles are less than eighteen months and getting shorter by the day).

Knowing when to move to the next big wave is by far the most important skill for long-term success in high technology; indeed, it’s even more important than choosing the right wave to ride in the first place.

Microsoft has been trying to invent a new style of surfing, characterized by moving on to the next wave but somehow taking the previous wave along with it. Other companies have tried and failed before at this sport (for example, IBM with its OfficeVision debacle, where PCs were rechristened “programmable terminals”). But Microsoft is not just another company. Bill Gates knows that his success is based on the de facto standard of MS-DOS. Microsoft Windows is an adjunct to DOS—it requires that DOS be present for it to work—so Bill used his DOS franchise to popularize a graphical user interface. He jumped to the Windows wave but took the DOS wave along with him. Now he is doing the same thing with network computing, multimedia computing, and even voice recognition, making all these parts adjuncts to Windows, which is itself an adjunct to DOS. Even Microsoft’s next-generation 32-bit operating system, Windows NT, carries along the Windows code and emulates MS-DOS.

Microsoft’s surfing strategy has a lot of advantages. By building on an installed base, each new version of the operating system automatically sells millions of upgrade copies to existing users and is profitable from its first days on the market. Microsoft’s applications also have market advantages stemming from this strategy, since they automatically work with all the new operating system features. This is Bill Gates’s genius, what has made him the richest person in America. But eventually even Bill will fail, when the load of carrying so many old waves of innovation along to the next one becomes just too much. Then another company will take over, offering newer technology.

But what wave are we riding right now? Not the wave you might expect. For the world of corporate computing, the transition from the personal computing wave to the next wave, called client-server computing, has already begun. It had to.

The life cycles of companies often follow the life cycles of their customers, which is no surprise to makers of hair color or disposable diapers, but has only lately occurred to the ever grayer heads running companies like IBM. Most of IBM’s customers, the corporate computer folks who took delivery of all those mainframe and minicomputers over the past thirty years, are nearing the end of their own careers. And having spent a full generation learning the hard way how to make cantankerous, highly complex, corporate computer systems run smoothly, this crew-cut and pocket-protectored gang is taking that precious knowledge off to the tennis court with them, where it will soon be lost forever.

Marshall McLuhan said that we convert our obsolete technologies into art forms, but, trust me, nobody is going to make a hobby of collecting $1 million mainframe computers.

If client-server is the present wave, the next wave is probably extending those same services out of the corporation to a larger audience. For this we need a big network, an Internet.
